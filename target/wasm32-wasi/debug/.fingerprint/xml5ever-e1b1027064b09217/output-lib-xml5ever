{"future_incompat_report":[{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22593,"byte_end":22594,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":24007,"byte_end":24024,"line_start":658,"line_end":658,"column_start":35,"column_end":52,"is_primary":false,"text":[{"text":"                    FromSet(c) => go!(self: emit c),","highlight_start":35,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:618:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m658\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    FromSet(c) => go!(self: emit c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":16547,"byte_end":16548,"line_start":520,"line_end":520,"column_start":76,"column_end":77,"is_primary":true,"text":[{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":76,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19923,"byte_end":19949,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22569,"byte_end":22593,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":24007,"byte_end":24024,"line_start":658,"line_end":658,"column_start":35,"column_end":52,"is_primary":false,"text":[{"text":"                    FromSet(c) => go!(self: emit c),","highlight_start":35,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19865,"byte_end":19954,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":16447,"byte_end":19552,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:520:76\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m520\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m658\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    FromSet(c) => go!(self: emit c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22593,"byte_end":22594,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":25426,"byte_end":25448,"line_start":690,"line_end":690,"column_start":27,"column_end":49,"is_primary":false,"text":[{"text":"                    cl => go!(self: push_tag cl),","highlight_start":27,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:618:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m690\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    cl => go!(self: push_tag cl),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":16792,"byte_end":16793,"line_start":522,"line_end":522,"column_start":93,"column_end":94,"is_primary":true,"text":[{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":93,"highlight_end":94}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19923,"byte_end":19949,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22569,"byte_end":22593,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":25426,"byte_end":25448,"line_start":690,"line_end":690,"column_start":27,"column_end":49,"is_primary":false,"text":[{"text":"                    cl => go!(self: push_tag cl),","highlight_start":27,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19865,"byte_end":19954,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":16447,"byte_end":19552,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:522:93\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m522\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m690\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    cl => go!(self: push_tag cl),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22593,"byte_end":22594,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":26392,"byte_end":26420,"line_start":713,"line_end":713,"column_start":27,"column_end":55,"is_primary":false,"text":[{"text":"                    cl => go!(self: push_pi_target cl),","highlight_start":27,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:618:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m713\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    cl => go!(self: push_pi_target cl),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19301,"byte_end":19302,"line_start":544,"line_end":544,"column_start":94,"column_end":95,"is_primary":true,"text":[{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":94,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19923,"byte_end":19949,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22569,"byte_end":22593,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":26392,"byte_end":26420,"line_start":713,"line_end":713,"column_start":27,"column_end":55,"is_primary":false,"text":[{"text":"                    cl => go!(self: push_pi_target cl),","highlight_start":27,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19865,"byte_end":19954,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":16447,"byte_end":19552,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:544:94\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m544\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m713\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    cl => go!(self: push_pi_target cl),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22593,"byte_end":22594,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":26912,"byte_end":26938,"line_start":727,"line_end":727,"column_start":27,"column_end":53,"is_primary":false,"text":[{"text":"                    cl => go!(self: push_pi_data cl),","highlight_start":27,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:618:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m727\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    cl => go!(self: push_pi_data cl),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19413,"byte_end":19414,"line_start":545,"line_end":545,"column_start":92,"column_end":93,"is_primary":true,"text":[{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":92,"highlight_end":93}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19923,"byte_end":19949,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22569,"byte_end":22593,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":26912,"byte_end":26938,"line_start":727,"line_end":727,"column_start":27,"column_end":53,"is_primary":false,"text":[{"text":"                    cl => go!(self: push_pi_data cl),","highlight_start":27,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19865,"byte_end":19954,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":16447,"byte_end":19552,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:545:92\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m545\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m727\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    cl => go!(self: push_pi_data cl),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22593,"byte_end":22594,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":27220,"byte_end":27246,"line_start":735,"line_end":735,"column_start":27,"column_end":53,"is_primary":false,"text":[{"text":"                    cl => go!(self: push_pi_data cl),","highlight_start":27,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:618:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m735\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    cl => go!(self: push_pi_data cl),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19413,"byte_end":19414,"line_start":545,"line_end":545,"column_start":92,"column_end":93,"is_primary":true,"text":[{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":92,"highlight_end":93}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19923,"byte_end":19949,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22569,"byte_end":22593,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":27220,"byte_end":27246,"line_start":735,"line_end":735,"column_start":27,"column_end":53,"is_primary":false,"text":[{"text":"                    cl => go!(self: push_pi_data cl),","highlight_start":27,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19865,"byte_end":19954,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":16447,"byte_end":19552,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:545:92\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m545\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m735\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    cl => go!(self: push_pi_data cl),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22593,"byte_end":22594,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":28828,"byte_end":28853,"line_start":772,"line_end":772,"column_start":26,"column_end":51,"is_primary":false,"text":[{"text":"                    c => go!(self: push_comment c),","highlight_start":26,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:618:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m772\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    c => go!(self: push_comment c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":17931,"byte_end":17932,"line_start":532,"line_end":532,"column_start":92,"column_end":93,"is_primary":true,"text":[{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":92,"highlight_end":93}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19923,"byte_end":19949,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22569,"byte_end":22593,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":28828,"byte_end":28853,"line_start":772,"line_end":772,"column_start":26,"column_end":51,"is_primary":false,"text":[{"text":"                    c => go!(self: push_comment c),","highlight_start":26,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19865,"byte_end":19954,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":16447,"byte_end":19552,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:532:92\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m532\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m772\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    c => go!(self: push_comment c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22593,"byte_end":22594,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":29135,"byte_end":29162,"line_start":779,"line_end":779,"column_start":28,"column_end":55,"is_primary":false,"text":[{"text":"                    '<' => go!(self: push_comment '<'),","highlight_start":28,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:618:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m779\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    '<' => go!(self: push_comment '<'),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":17931,"byte_end":17932,"line_start":532,"line_end":532,"column_start":92,"column_end":93,"is_primary":true,"text":[{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":92,"highlight_end":93}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19923,"byte_end":19949,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22569,"byte_end":22593,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":29135,"byte_end":29162,"line_start":779,"line_end":779,"column_start":28,"column_end":55,"is_primary":false,"text":[{"text":"                    '<' => go!(self: push_comment '<'),","highlight_start":28,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19865,"byte_end":19954,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":16447,"byte_end":19552,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:532:92\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m532\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m779\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    '<' => go!(self: push_comment '<'),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22593,"byte_end":22594,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":30769,"byte_end":30796,"line_start":816,"line_end":816,"column_start":28,"column_end":55,"is_primary":false,"text":[{"text":"                    '-' => go!(self: push_comment '-'),","highlight_start":28,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:618:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m816\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    '-' => go!(self: push_comment '-'),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":17931,"byte_end":17932,"line_start":532,"line_end":532,"column_start":92,"column_end":93,"is_primary":true,"text":[{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":92,"highlight_end":93}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19923,"byte_end":19949,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22569,"byte_end":22593,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":30769,"byte_end":30796,"line_start":816,"line_end":816,"column_start":28,"column_end":55,"is_primary":false,"text":[{"text":"                    '-' => go!(self: push_comment '-'),","highlight_start":28,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19865,"byte_end":19954,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":16447,"byte_end":19552,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:532:92\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m532\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m816\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    '-' => go!(self: push_comment '-'),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22593,"byte_end":22594,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":31513,"byte_end":31538,"line_start":832,"line_end":832,"column_start":26,"column_end":51,"is_primary":false,"text":[{"text":"                    c => go!(self: push_comment c),","highlight_start":26,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:618:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m832\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    c => go!(self: push_comment c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":17931,"byte_end":17932,"line_start":532,"line_end":532,"column_start":92,"column_end":93,"is_primary":true,"text":[{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":92,"highlight_end":93}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19923,"byte_end":19949,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22569,"byte_end":22593,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":31513,"byte_end":31538,"line_start":832,"line_end":832,"column_start":26,"column_end":51,"is_primary":false,"text":[{"text":"                    c => go!(self: push_comment c),","highlight_start":26,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19865,"byte_end":19954,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":16447,"byte_end":19552,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:532:92\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m532\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m832\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    c => go!(self: push_comment c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22593,"byte_end":22594,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":31768,"byte_end":31786,"line_start":839,"line_end":839,"column_start":27,"column_end":45,"is_primary":false,"text":[{"text":"                    cl => go!(self: emit cl),","highlight_start":27,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:618:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m839\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    cl => go!(self: emit cl),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":16547,"byte_end":16548,"line_start":520,"line_end":520,"column_start":76,"column_end":77,"is_primary":true,"text":[{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":76,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19923,"byte_end":19949,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22569,"byte_end":22593,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":31768,"byte_end":31786,"line_start":839,"line_end":839,"column_start":27,"column_end":45,"is_primary":false,"text":[{"text":"                    cl => go!(self: emit cl),","highlight_start":27,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19865,"byte_end":19954,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":16447,"byte_end":19552,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:520:76\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m520\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m839\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    cl => go!(self: emit cl),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22593,"byte_end":22594,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":32295,"byte_end":32314,"line_start":853,"line_end":853,"column_start":28,"column_end":47,"is_primary":false,"text":[{"text":"                    ']' => go!(self: emit ']'),","highlight_start":28,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:618:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m853\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    ']' => go!(self: emit ']'),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":16547,"byte_end":16548,"line_start":520,"line_end":520,"column_start":76,"column_end":77,"is_primary":true,"text":[{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":76,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19923,"byte_end":19949,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22569,"byte_end":22593,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":32295,"byte_end":32314,"line_start":853,"line_end":853,"column_start":28,"column_end":47,"is_primary":false,"text":[{"text":"                    ']' => go!(self: emit ']'),","highlight_start":28,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19865,"byte_end":19954,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":16447,"byte_end":19552,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:520:76\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m520\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m853\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    ']' => go!(self: emit ']'),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22593,"byte_end":22594,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":32763,"byte_end":32785,"line_start":863,"line_end":863,"column_start":27,"column_end":49,"is_primary":false,"text":[{"text":"                    cl => go!(self: push_tag cl),","highlight_start":27,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:618:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m863\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    cl => go!(self: push_tag cl),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":16792,"byte_end":16793,"line_start":522,"line_end":522,"column_start":93,"column_end":94,"is_primary":true,"text":[{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":93,"highlight_end":94}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19923,"byte_end":19949,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22569,"byte_end":22593,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":32763,"byte_end":32785,"line_start":863,"line_end":863,"column_start":27,"column_end":49,"is_primary":false,"text":[{"text":"                    cl => go!(self: push_tag cl),","highlight_start":27,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19865,"byte_end":19954,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":16447,"byte_end":19552,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:522:93\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m522\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m863\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    cl => go!(self: push_tag cl),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22593,"byte_end":22594,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":33436,"byte_end":33452,"line_start":879,"line_end":879,"column_start":28,"column_end":44,"is_primary":false,"text":[{"text":"                    ':' => go!(self: error),","highlight_start":28,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:618:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m879\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    ':' => go!(self: error),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":18944,"byte_end":18945,"line_start":541,"line_end":541,"column_start":79,"column_end":80,"is_primary":true,"text":[{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":79,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19923,"byte_end":19949,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22569,"byte_end":22593,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":33436,"byte_end":33452,"line_start":879,"line_end":879,"column_start":28,"column_end":44,"is_primary":false,"text":[{"text":"                    ':' => go!(self: error),","highlight_start":28,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19865,"byte_end":19954,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":16447,"byte_end":19552,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:541:79\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m541\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m879\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    ':' => go!(self: error),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22593,"byte_end":22594,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":33968,"byte_end":33991,"line_start":890,"line_end":890,"column_start":27,"column_end":50,"is_primary":false,"text":[{"text":"                    cl => go!(self: push_name cl),","highlight_start":27,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:618:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m890\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    cl => go!(self: push_name cl),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":17591,"byte_end":17592,"line_start":529,"line_end":529,"column_start":94,"column_end":95,"is_primary":true,"text":[{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":94,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19923,"byte_end":19949,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22569,"byte_end":22593,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":33968,"byte_end":33991,"line_start":890,"line_end":890,"column_start":27,"column_end":50,"is_primary":false,"text":[{"text":"                    cl => go!(self: push_name cl),","highlight_start":27,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19865,"byte_end":19954,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":16447,"byte_end":19552,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:529:94\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m529\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m890\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    cl => go!(self: push_name cl),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22593,"byte_end":22594,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":35438,"byte_end":35461,"line_start":919,"line_end":919,"column_start":35,"column_end":58,"is_primary":false,"text":[{"text":"                    FromSet(c) => go!(self: push_value c),","highlight_start":35,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:618:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m919\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    FromSet(c) => go!(self: push_value c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":17706,"byte_end":17707,"line_start":530,"line_end":530,"column_start":95,"column_end":96,"is_primary":true,"text":[{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":95,"highlight_end":96}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19923,"byte_end":19949,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22569,"byte_end":22593,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":35438,"byte_end":35461,"line_start":919,"line_end":919,"column_start":35,"column_end":58,"is_primary":false,"text":[{"text":"                    FromSet(c) => go!(self: push_value c),","highlight_start":35,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19865,"byte_end":19954,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":16447,"byte_end":19552,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:530:95\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m530\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m919\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    FromSet(c) => go!(self: push_value c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22593,"byte_end":22594,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":35504,"byte_end":35529,"line_start":920,"line_end":920,"column_start":42,"column_end":67,"is_primary":false,"text":[{"text":"                    NotFromSet(ref b) => go!(self: append_value b),","highlight_start":42,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:618:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m920\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    NotFromSet(ref b) => go!(self: append_value b),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":17823,"byte_end":17824,"line_start":531,"line_end":531,"column_start":98,"column_end":99,"is_primary":true,"text":[{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":98,"highlight_end":99}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19923,"byte_end":19949,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22569,"byte_end":22593,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":35504,"byte_end":35529,"line_start":920,"line_end":920,"column_start":42,"column_end":67,"is_primary":false,"text":[{"text":"                    NotFromSet(ref b) => go!(self: append_value b),","highlight_start":42,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19865,"byte_end":19954,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":16447,"byte_end":19552,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:531:98\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m531\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m920\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    NotFromSet(ref b) => go!(self: append_value b),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22593,"byte_end":22594,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":35940,"byte_end":35963,"line_start":928,"line_end":928,"column_start":35,"column_end":58,"is_primary":false,"text":[{"text":"                    FromSet(c) => go!(self: push_value c),","highlight_start":35,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:618:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m928\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    FromSet(c) => go!(self: push_value c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":17706,"byte_end":17707,"line_start":530,"line_end":530,"column_start":95,"column_end":96,"is_primary":true,"text":[{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":95,"highlight_end":96}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19923,"byte_end":19949,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22569,"byte_end":22593,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":35940,"byte_end":35963,"line_start":928,"line_end":928,"column_start":35,"column_end":58,"is_primary":false,"text":[{"text":"                    FromSet(c) => go!(self: push_value c),","highlight_start":35,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19865,"byte_end":19954,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":16447,"byte_end":19552,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:530:95\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m530\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m928\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    FromSet(c) => go!(self: push_value c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22593,"byte_end":22594,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":36006,"byte_end":36031,"line_start":929,"line_end":929,"column_start":42,"column_end":67,"is_primary":false,"text":[{"text":"                    NotFromSet(ref b) => go!(self: append_value b),","highlight_start":42,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:618:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m929\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    NotFromSet(ref b) => go!(self: append_value b),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":17823,"byte_end":17824,"line_start":531,"line_end":531,"column_start":98,"column_end":99,"is_primary":true,"text":[{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":98,"highlight_end":99}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19923,"byte_end":19949,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22569,"byte_end":22593,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":36006,"byte_end":36031,"line_start":929,"line_end":929,"column_start":42,"column_end":67,"is_primary":false,"text":[{"text":"                    NotFromSet(ref b) => go!(self: append_value b),","highlight_start":42,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19865,"byte_end":19954,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":16447,"byte_end":19552,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:531:98\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m531\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m929\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    NotFromSet(ref b) => go!(self: append_value b),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22593,"byte_end":22594,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":36534,"byte_end":36557,"line_start":938,"line_end":938,"column_start":35,"column_end":58,"is_primary":false,"text":[{"text":"                    FromSet(c) => go!(self: push_value c),","highlight_start":35,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:618:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m938\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    FromSet(c) => go!(self: push_value c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":17706,"byte_end":17707,"line_start":530,"line_end":530,"column_start":95,"column_end":96,"is_primary":true,"text":[{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":95,"highlight_end":96}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19923,"byte_end":19949,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22569,"byte_end":22593,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":36534,"byte_end":36557,"line_start":938,"line_end":938,"column_start":35,"column_end":58,"is_primary":false,"text":[{"text":"                    FromSet(c) => go!(self: push_value c),","highlight_start":35,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19865,"byte_end":19954,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":16447,"byte_end":19552,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:530:95\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m530\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m938\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    FromSet(c) => go!(self: push_value c),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22593,"byte_end":22594,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":36600,"byte_end":36625,"line_start":939,"line_end":939,"column_start":42,"column_end":67,"is_primary":false,"text":[{"text":"                    NotFromSet(ref b) => go!(self: append_value b),","highlight_start":42,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:618:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m939\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    NotFromSet(ref b) => go!(self: append_value b),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":17823,"byte_end":17824,"line_start":531,"line_end":531,"column_start":98,"column_end":99,"is_primary":true,"text":[{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":98,"highlight_end":99}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19923,"byte_end":19949,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22569,"byte_end":22593,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":36600,"byte_end":36625,"line_start":939,"line_end":939,"column_start":42,"column_end":67,"is_primary":false,"text":[{"text":"                    NotFromSet(ref b) => go!(self: append_value b),","highlight_start":42,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19865,"byte_end":19954,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":16447,"byte_end":19552,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:531:98\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m531\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m939\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    NotFromSet(ref b) => go!(self: append_value b),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22593,"byte_end":22594,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":40956,"byte_end":40989,"line_start":1025,"line_end":1025,"column_start":26,"column_end":59,"is_primary":false,"text":[{"text":"                    c => go!(self: push_doctype_id kind c),","highlight_start":26,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:618:62\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m618\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1025\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    c => go!(self: push_doctype_id kind c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":18617,"byte_end":18618,"line_start":538,"line_end":538,"column_start":94,"column_end":95,"is_primary":true,"text":[{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":94,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19923,"byte_end":19949,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22569,"byte_end":22593,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":40956,"byte_end":40989,"line_start":1025,"line_end":1025,"column_start":26,"column_end":59,"is_primary":false,"text":[{"text":"                    c => go!(self: push_doctype_id kind c),","highlight_start":26,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19865,"byte_end":19954,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":16447,"byte_end":19552,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:538:94\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m538\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1025\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    c => go!(self: push_doctype_id kind c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22593,"byte_end":22594,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":41412,"byte_end":41445,"line_start":1033,"line_end":1033,"column_start":26,"column_end":59,"is_primary":false,"text":[{"text":"                    c => go!(self: push_doctype_id kind c),","highlight_start":26,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:618:62\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m618\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1033\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    c => go!(self: push_doctype_id kind c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":18617,"byte_end":18618,"line_start":538,"line_end":538,"column_start":94,"column_end":95,"is_primary":true,"text":[{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":94,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19923,"byte_end":19949,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22569,"byte_end":22593,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":41412,"byte_end":41445,"line_start":1033,"line_end":1033,"column_start":26,"column_end":59,"is_primary":false,"text":[{"text":"                    c => go!(self: push_doctype_id kind c),","highlight_start":26,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19865,"byte_end":19954,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":16447,"byte_end":19552,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:538:94\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m538\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1033\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    c => go!(self: push_doctype_id kind c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22593,"byte_end":22594,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":48092,"byte_end":48109,"line_start":1197,"line_end":1197,"column_start":49,"column_end":66,"is_primary":false,"text":[{"text":"                states::Data | states::Cdata => go!(self: emit c),","highlight_start":49,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:618:62\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m618\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1197\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                states::Data | states::Cdata => go!(self: emit c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":16547,"byte_end":16548,"line_start":520,"line_end":520,"column_start":76,"column_end":77,"is_primary":true,"text":[{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":76,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19923,"byte_end":19949,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22569,"byte_end":22593,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":48092,"byte_end":48109,"line_start":1197,"line_end":1197,"column_start":49,"column_end":66,"is_primary":false,"text":[{"text":"                states::Data | states::Cdata => go!(self: emit c),","highlight_start":49,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19865,"byte_end":19954,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":16447,"byte_end":19552,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:520:76\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m520\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1197\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                states::Data | states::Cdata => go!(self: emit c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22593,"byte_end":22594,"line_start":618,"line_end":618,"column_start":62,"column_end":63,"is_primary":true,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":62,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":48155,"byte_end":48178,"line_start":1199,"line_end":1199,"column_start":44,"column_end":67,"is_primary":false,"text":[{"text":"                states::TagAttrValue(_) => go!(self: push_value c),","highlight_start":44,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:618:62\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m618\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1199\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                states::TagAttrValue(_) => go!(self: push_value c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":17706,"byte_end":17707,"line_start":530,"line_end":530,"column_start":95,"column_end":96,"is_primary":true,"text":[{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":95,"highlight_end":96}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19923,"byte_end":19949,"line_start":558,"line_end":558,"column_start":59,"column_end":85,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":22569,"byte_end":22593,"line_start":618,"line_end":618,"column_start":38,"column_end":62,"is_primary":false,"text":[{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":38,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":48155,"byte_end":48178,"line_start":1199,"line_end":1199,"column_start":44,"column_end":67,"is_primary":false,"text":[{"text":"                states::TagAttrValue(_) => go!(self: push_value c),","highlight_start":44,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"go!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":20006,"byte_end":22649,"line_start":561,"line_end":622,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! go (","highlight_start":1,"highlight_end":18},{"text":"    // A pattern like $($cmd:tt)* ; $($rest:tt)* causes parse ambiguity.","highlight_start":1,"highlight_end":73},{"text":"    // We have to tell the parser how much lookahead we need.","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : $a:tt                   ; $($rest:tt)* ) => ({ sh_trace!($me: $a);          go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt             ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b);       go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt       ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c);    go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"    ( $me:ident : $a:tt $b:tt $c:tt $d:tt ; $($rest:tt)* ) => ({ sh_trace!($me: $a $b $c $d); go!($me: $($rest)*); });","highlight_start":1,"highlight_end":119},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // These can only come at the end.","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : to $s:ident                    ) => ({ $me.state = states::$s; return true;           });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:expr           ) => ({ $me.state = states::$s($k1); return true;      });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : to $s:ident $k1:ident $k2:expr ) => ({ $me.state = states::$s($k1($k2)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : reconsume $s:ident                    ) => ({ $me.reconsume = true; go!($me: to $s);         });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:expr           ) => ({ $me.reconsume = true; go!($me: to $s $k1);     });","highlight_start":1,"highlight_end":115},{"text":"    ( $me:ident : reconsume $s:ident $k1:ident $k2:expr ) => ({ $me.reconsume = true; go!($me: to $s $k1 $k2); });","highlight_start":1,"highlight_end":115},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : consume_char_ref             ) => ({ $me.consume_char_ref(None); return true;         });","highlight_start":1,"highlight_end":108},{"text":"    ( $me:ident : consume_char_ref $addnl:expr ) => ({ $me.consume_char_ref(Some($addnl)); return true; });","highlight_start":1,"highlight_end":108},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a default next state after emitting a tag, but the sink can override.","highlight_start":1,"highlight_end":85},{"text":"    ( $me:ident : emit_tag $s:ident ) => ({","highlight_start":1,"highlight_end":44},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_current_tag();","highlight_start":1,"highlight_end":32},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We have a special when dealing with empty and short tags in Xml","highlight_start":1,"highlight_end":71},{"text":"    ( $me:ident : emit_short_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_short_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_empty_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_empty_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_start_tag $s:ident ) => ({","highlight_start":1,"highlight_end":50},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_start_tag();","highlight_start":1,"highlight_end":30},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : emit_pi $s:ident ) => ({","highlight_start":1,"highlight_end":43},{"text":"        $me.state = states::$s;","highlight_start":1,"highlight_end":32},{"text":"        $me.emit_pi();","highlight_start":1,"highlight_end":23},{"text":"        return true;","highlight_start":1,"highlight_end":21},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ( $me:ident : eof ) => ({ $me.emit_eof(); return false; });","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // If nothing else matched, it's a single command","highlight_start":1,"highlight_end":54},{"text":"    ( $me:ident : $($cmd:tt)+ ) => ( sh_trace!($me: $($cmd)+); );","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // or nothing.","highlight_start":1,"highlight_end":19},{"text":"    ( $me:ident : ) => (());","highlight_start":1,"highlight_end":29},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"sh_trace!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":19865,"byte_end":19954,"line_start":558,"line_end":558,"column_start":1,"column_end":90,"is_primary":false,"text":[{"text":"macro_rules! sh_trace ( ( $me:ident : $($cmds:tt)* ) => ( shorthand!($me: $($cmds)*) ) );","highlight_start":1,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"shorthand!","def_site_span":{"file_name":"/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs","byte_start":16447,"byte_end":19552,"line_start":519,"line_end":547,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! shorthand (","highlight_start":1,"highlight_end":25},{"text":"    ( $me:ident : emit $c:expr                     ) => ( $me.emit_char($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_tag $kind:ident $c:expr   ) => ( $me.create_tag($kind, $c);                           );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_tag $c:expr                 ) => ( $me.current_tag_name.push_char($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_tag $input:expr          ) => ( $me.discard_tag($input);                             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : discard_char                     ) => ( $me.discard_char();                                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_temp $c:expr                ) => ( $me.temp_buf.push_char($c);                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_temp                        ) => ( $me.emit_temp_buf();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_temp                       ) => ( $me.clear_temp_buf();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_attr $c:expr              ) => ( $me.create_attribute($c);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_name $c:expr                ) => ( $me.current_attr_name.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_value $c:expr             ) => ( $me.current_attr_value.push_tendril($c);             );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_comment $c:expr             ) => ( $me.current_comment.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : append_comment $c:expr           ) => ( $me.current_comment.push_slice($c);                  );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_comment                     ) => ( $me.emit_current_comment();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_comment                    ) => ( $me.current_comment.clear();                         );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_doctype                   ) => ( $me.current_doctype = Doctype::new();                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_name $c:expr        ) => ( option_push(&mut $me.current_doctype.name, $c);      );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_doctype_id $k:ident $c:expr ) => ( option_push($me.doctype_id($k), $c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : clear_doctype_id $k:ident        ) => ( $me.clear_doctype_id($k);                            );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : emit_doctype                     ) => ( $me.emit_current_doctype();                          );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error                            ) => ( $me.bad_char_error();                                );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : error_eof                        ) => ( $me.bad_eof_error();                                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : create_pi $c:expr                ) => ( $me.create_pi($c);                                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_target $c:expr           ) => ( $me.current_pi_target.push_char($c);                 );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : push_pi_data $c:expr             ) => ( $me.current_pi_data.push_char($c);                   );","highlight_start":1,"highlight_end":114},{"text":"    ( $me:ident : set_empty_tag                    ) => ( $me.set_empty_tag();                                 );","highlight_start":1,"highlight_end":114},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[allow(semicolon_in_expressions_from_macros)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/codespace/.cargo/registry/src/index.crates.io-6f17d22bba15001f/xml5ever-0.16.1/src/tokenizer/mod.rs:530:95\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m530\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ( $me:ident : push_value $c:expr               ) => ( $me.current_attr_value.push_char($c);                );\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1199\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                states::TagAttrValue(_) => go!(self: push_value c),\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[allow(semicolon_in_expressions_from_macros)]` on by default\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `shorthand` which comes from the expansion of the macro `go` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}}]}
